{"version":3,"file":"static/js/28.0801fd24.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactsPage/ContactsPage.module.css?5257","components/ContactsPage/ContactsPage.jsx","pages/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.contacts.items;\nexport const getIsLoading = state => state.contacts.contacts.isLoading;\nexport const getError = state => state.contacts.contacts.error;\nexport const getFilter = state => state.contacts.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactLabel\":\"ContactForm_contactLabel__vt5it\",\"contactInput\":\"ContactForm_contactInput__z6XOX\",\"contactBtn\":\"ContactForm_contactBtn__Hbm5v\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const existingContact = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n\n    if (existingContact) {\n      alert(`${name} or ${number} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.contactForm}>\n      <label className={css.contactLabel}>\n        Name\n        <input\n          className={css.contactInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={css.contactLabel}>\n        Number\n        <input\n          className={css.contactInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={css.contactBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { filtredContacts } from 'redux/contacts/contactSlice';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = evt => {\n    dispatch(filtredContacts(evt.target.value));\n  };\n\n  return (\n    <label className={css.filterLabel}>\n      Find contact by name\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        value={filter}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactListItem_contactItem__g+7xP\",\"contactName\":\"ContactListItem_contactName__kCRjB\",\"deleteBtn\":\"ContactListItem_deleteBtn__roUYm\"};","import PropTypes from 'prop-types';\nimport css from './ContactListItem.module.css';\n\nconst ContactListItem = ({ name, number, onDeleteContact }) => (\n  <li className={css.contactItem}>\n    <p className={css.contactName}>\n      {name}: {number}\n    </p>\n    <button className={css.deleteBtn} type=\"button\" onClick={onDeleteContact}>\n      Delete\n    </button>\n  </li>\n);\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const filtredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const contactsAfterFiter = filtredContacts();\n\n  return (\n    <ul className={css.contactList}>\n      {contactsAfterFiter.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onDeleteContact={() => dispatch(deleteContact(id))}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts__box\":\"ContactsPage_contacts__box__EGUYS\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getIsLoading, getError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport css from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.contacts__box}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {<ContactList />}\n      {isLoading && !error && <b>Request in progress...</b>}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","import ContactsPage from 'components/ContactsPage/ContactsPage';\n\nconst Contacts = () => (\n      <ContactsPage />\n  );\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","evt","target","value","onSubmit","preventDefault","find","contact","toLowerCase","alert","addContact","className","css","type","pattern","title","required","onChange","filtredContacts","onDeleteContact","onClick","contactsAfterFiter","normalizedFilter","includes","map","id","deleteContact","useEffect","fetchContacts"],"sourceRoot":""}